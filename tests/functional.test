#!/usr/bin/perl

use strict;
use warnings;
use POSIX ":sys_wait_h";

$SIG{CHLD} = \&REAPER;

my %children;

sub REAPER {
    my $stiff;
    while (($stiff = waitpid(-1, &WNOHANG)) > 0) {
        # do something with $stiff if you want
        $children{$stiff}->{'running'} = undef;
        $children{$stiff}->{'exit_code'} = $? >> 8;
        $children{$stiff}->{'signal'} = $? & 127;
    }
    $SIG{CHLD} = \&REAPER; # install *after* calling waitpid
}

sub start_proxy {
    my @wrapper = @_;
    # Start the proxy in forground HTTP mode on a high port with our test config, this shouldn't require privileges

    my $pid = fork();
    if (not defined $pid) {
        die("fork: $!");
    } elsif ($pid == 0) {
        exec(@wrapper, '../src/sni_proxy', '-f', '-c', 'test_proxy.conf')
            or die("exec: $!");
    }

    $children{$pid} = { 
        type => 'server',
        pid => $pid,
        running => 1,
    };

    return $pid;
}

sub worker($$$) {
    my ($hostname, $path, $requests) = @_;
    # We don't want our signal handler to interfer with system()'s default behaviour
    undef $SIG{CHLD};

    for (my $i = 0; $i < $requests; $i++) {
        system('/usr/bin/curl',
                '-s', '-S',
                '-H', "Host: $hostname",
                '-o', '/dev/null',
                "http://localhost:8080/$path");

        if ($? == -1) {
            die "failed to execute: $!\n";
        } elsif ($? & 127) {
            printf STDERR "child died with signal %d, %s coredump\n", ($? & 127), ($? & 128) ? 'with' : 'without';
            exit 255;
        } elsif ($? >> 8) {
            exit $? >> 8;
        }
    }
    # Success
    exit 0;
}

# Make several requests through the proxy specifying the host header
sub start_worker($$$) {
    my ($hostname, $path, $requests) = @_;

    my $pid = fork();
    if (not defined $pid) {
        die("fork: $!");
    } elsif ($pid == 0) {
        worker($hostname, $path, $requests);
        # Should not be reached
        exit(99);
    }

    $children{$pid} = {
        type => 'worker',
        pid => $pid,
        running => 1,
    };

    return $pid;
}

sub reap_children {
    while (my @hit_list = grep($children{$_}->{'running'}, keys %children)) {
        print STDERR "sending $children{$_}->{'type'} child $_ SIGTERM\n";
        kill 15, @hit_list;
        sleep 1;
    }
}

sub main {
    my $proxy_pid = start_proxy(@ARGV);

    sleep 1;
    
    for (my $i = 0; $i < 10; $i++) {
        start_worker('localhost', '', 10);
    }

    # Wait for all our children to finish
    while (grep($children{$_}->{'running'} && $children{$_}->{'type'} eq 'worker', keys %children) > 0) {
        sleep 1;
    }
    # Give the proxy a second to flush buffers and close server connections
    sleep 1;

    # For troubleshooting connections stuck in CLOSE_WAIT state
    #kill 10, $proxy_pid;
    #system("netstat -ptn | grep $proxy_pid\/sni_proxy");

    # Orderly shutdown of the server
    kill 15, $proxy_pid;
    sleep 1;

    # Kill off any remaining children
    reap_children();

    # Check that all our children exited cleanly
    if (my @failures = grep($_->{'exit_code'} != 0, values %children)) {
        print "Test failed.\n";
        foreach (@failures) {
            print "$_->{'type'} failed with exit code $_->{'exit_code'}\n";
        }
        exit 1;
    } else {
        # print "Test passed.\n";
        exit 0;
    }
}

main();
