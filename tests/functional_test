#!/usr/bin/perl

use strict;
use warnings;
use TestUtils;
use Socket;
use File::Temp;

sub make_config($) {
    my $port = shift;

    my ($fh, $filename) = File::Temp::tempfile();

    # Write out a test config file
    print $fh <<END;
# Minimal test configuration

listen $port {
    proto http
}

table {
    localhost 127.0.0.1 80
}
END

    close ($fh);

    return $filename;
}

sub proxy {
    my $config = shift;

    exec(@_, '../src/sni_proxy', '-f', '-c', $config);
}

sub worker($$$$) {
    my ($hostname, $path, $port, $requests) = @_;
    # We don't want our signal handler to interfer with system()'s default behaviour
    undef $SIG{CHLD};

    for (my $i = 0; $i < $requests; $i++) {
        system('curl',
                '-s', '-S',
                '-H', "Host: $hostname",
                '-o', '/dev/null',
                "http://localhost:$port/$path");

        if ($? == -1) {
            die "failed to execute: $!\n";
        } elsif ($? & 127) {
            printf STDERR "child died with signal %d, %s coredump\n", ($? & 127), ($? & 128) ? 'with' : 'without';
            exit 255;
        } elsif ($? >> 8) {
            exit $? >> 8;
        }
    }
    # Success
    exit 0;
}


sub main {
    my $port = $ENV{SNI_PROXY_PORT} || 8080;

    my $config = make_config($port);
    my $proxy_pid = start_child('server', \&proxy, $config, @ARGV);

    sleep 1;

    for (my $i = 0; $i < 10; $i++) {
        start_child('worker', \&worker, 'localhost', '', $port, 10);
    }

    # Wait for all our children to finish
    wait_for_type('worker');

    # Give the proxy a second to flush buffers and close server connections
    sleep 1;

    # For troubleshooting connections stuck in CLOSE_WAIT state
    #kill 10, $proxy_pid;
    #system("netstat -ptn | grep $proxy_pid\/sni_proxy");

    # For troubleshooting 100% CPU usage
    #system("top -n 1 -p $proxy_pid -b");

    # Orderly shutdown of the server
    kill 15, $proxy_pid;
    sleep 1;

    # Delete our test configuration
    unlink($config);

    # Kill off any remaining children
    reap_children();
}

main();
